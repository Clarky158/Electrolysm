// Date: 06/07/2014 11:30:10
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package electro.client;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;

public class ModelRobotArm extends ModelBase {
    //fields
    ModelRenderer base;
    ModelRenderer Sholder;
    ModelRenderer Forearm;
    ModelRenderer arm;
    ModelRenderer toolBase;

    public ModelRobotArm() {
        textureWidth = 256;
        textureHeight = 32;

        base = new ModelRenderer(this, 0, 0);
        base.addBox(-8F, 0F, -8F, 16, 1, 16);
        base.setRotationPoint(0F, 23F, 0F);
        base.setTextureSize(256, 32);
        base.mirror = true;
        setRotation(base, 0F, 0F, 0F);
        Sholder = new ModelRenderer(this, 0, 0);
        Sholder.addBox(-2.5F, -5F, -2.5F, 5, 8, 5);
        Sholder.setRotationPoint(0F, 20F, 0F);
        Sholder.setTextureSize(256, 32);
        Sholder.mirror = true;
        setRotation(Sholder, 0F, 0F, 0F);
        Forearm = new ModelRenderer(this, 0, 0);
        Forearm.addBox(2.5F, -16F, -2F, 1, 18, 4);
        Forearm.setRotationPoint(0F, 17F, 0F);
        Forearm.setTextureSize(256, 32);
        Forearm.mirror = true;
        setRotation(Forearm, 0F, 0F, 0F);
        arm = new ModelRenderer(this, 0, 0);
        arm.addBox(-2F, -2F, -4F, 4, 4, 22);
        arm.addBox(-1F, -1F, -4F, 2, 2, 26);
        arm.setRotationPoint(0.5F, 3F, 0F);
        arm.setTextureSize(256, 32);
        arm.mirror = true;
        setRotation(arm, 0F, 0F, 0F);

        toolBase = new ModelRenderer(this, 0, 0);
        toolBase.addBox(-2F, -2F, -4F, 2, 6, 2);
        toolBase.setRotationPoint(0.5F, 3F, 0F);
        toolBase.setTextureSize(256, 32);
        toolBase.mirror = true;
        setRotation(arm, 0F, 0F, 0F);
    }

    public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5) {
        super.render(entity, f, f1, f2, f3, f4, f5);
        setRotationAngles(f, f1, f2, f3, f4, f5);
        base.render(f5);
        Sholder.render(f5);
        Forearm.render(f5);
        arm.render(f5);
        toolBase.render(f5);

        Sholder.rotateAngleY = (float) 0;
        arm.rotateAngleY = (float) 0;
        Forearm.rotateAngleY = (float) 0;

        this.getEndOfForearm();
        this.getEndOfArm();
    }

    public void renderWithAngle(float forearmAngle, float armAngle, Entity entity,
                                float f, float f1, float f2, float f3, float f4, float f5)
    {
        this.render(entity, f, f1, f2, f3, f4, f5);

        Forearm.rotateAngleX = forearmAngle;
        arm.rotateAngleX = armAngle;
    }

    public void getEndOfArm()
    {
        float outsideBAngle = /*(float)Math.sqrt(Math.pow(*/arm.rotateAngleX/*, 2))*/;

        float x = arm.rotationPointX;
        float y = arm.rotationPointY;
        float z = arm.rotationPointZ;
        float hyp = 20;

        float base = (float)((Math.cos(outsideBAngle)) * hyp);
        float height = (float)((Math.sin(outsideBAngle)) * hyp);

        toolBase.setRotationPoint(x, y - height, z + base + 3F);
    }

    public void getEndOfForearm(){

        float outsideXAngle = (float)/*Math.sqrt(Math.pow(*/Forearm.rotateAngleX/*, 2))*/;
        float insideXAngle = (90 - outsideXAngle);
        float insideTopAngle = 180 - (insideXAngle + 90);

        float hypotenuse = 14;
        float base = (float)((Math.sin(outsideXAngle)) * hypotenuse);
        float height = (float)((Math.cos(outsideXAngle)) * hypotenuse);


        arm.setRotationPoint(0.5F, 17F - height, 0.0F - base);
        //wrist.setRotationPoint(-1F, 17F - height, 0.0F - base);

    }

  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.setRotationAngles(f, f1, f2, f3, f4, f5, null);
  }

}
